package build_
import _root_.{build_ => $file}
import build_.{package_ => build}
import _root_.mill.runner.MillBuildRootModule
@_root_.scala.annotation.nowarn
object MillMiscInfo extends mill.main.RootModule.Info(
  Vector("/home/sashamane/Development/test-out/slang/out/mill-launcher/0.12.9.jar"),
  "/home/sashamane/Development/test-out/slang",
  "/home/sashamane/Development/test-out/slang/out",
  "/home/sashamane/Development/test-out/slang"
)
import MillMiscInfo._

object package_ extends package_{
  
  override lazy val millDiscover: _root_.mill.define.Discover = _root_.mill.define.Discover[this.type]

}
abstract class package_ extends _root_.mill.main.RootModule()  {
//MILL_ORIGINAL_FILE_PATH=/home/sashamane/Development/test-out/slang/build.mill
//MILL_USER_CODE_START_MARKER


import mill._, scalalib._

val scalaVer = "2.13.16"
val scalaJSVer = "1.18.2"
val scalaTestVer = "3.2.19"
val scalacPluginVer = "4.20250312.bf55c08"

val scalacOpts = Seq("-release", "17", "-deprecation", "-Yrangepos", "-Ydelambdafy:method", "-feature", "-unchecked", "-language:postfixOps")

val scalaDocOpts = Seq("-siteroot", "mydocs", "-no-link-warnings")

val javacOpts = Seq("-source", "17", "-target", "17", "-encoding", "utf8", "-XDignore.symbol.file", "-Xlint:-options", "-Xlint:deprecation", "-proc:none")

val repos = Seq(
  coursier.maven.MavenRepository((os.home / ".m2" / "repository").toIO.toURI.toASCIIString),
  coursier.maven.MavenRepository("https://oss.sonatype.org/content/repositories/releases"),
  coursier.maven.MavenRepository("https://jitpack.io")
)

val `org.sireum.kekinian::library:` = "ff179091ab"
val `org.sireum.kekinian::hamr-vision:` = "ff179091ab"

def `m-isolette_single_sensor_Instance` = isolette_single_sensor_Instance


trait JavaModule extends javalib.JavaModule {
  def javacOptions = javacOpts
  def repositoriesTask = Task.Anon { super.repositoriesTask() ++ repos }
  trait TestSuite extends JavaTests with scalalib.TestModule.ScalaTest {
    def ivyDeps = Agg(ivy"org.scalatest::scalatest::$scalaTestVer")
  }
}

trait ScalaModule extends scalalib.ScalaModule {
  def scalaVersion = scalaVer
  def scalacOptions = scalacOpts
  def scalacPluginIvyDeps = Agg(ivy"org.sireum::scalac-plugin:$scalacPluginVer")
  def scalaDocOptions = scalaDocOpts
  def javacOptions = javacOpts
  def repositoriesTask = Task.Anon { super.repositoriesTask() ++ repos }
  trait TestSuite extends ScalaTests with scalalib.TestModule.ScalaTest {
    def ivyDeps = Agg(ivy"org.scalatest::scalatest::$scalaTestVer")
  }
}

trait ScalaJSModule extends scalajslib.ScalaJSModule {
  def scalaVersion = scalaVer
  def scalacOptions = scalacOpts
  def scalacPluginIvyDeps = Agg(ivy"org.sireum::scalac-plugin:$scalacPluginVer")
  def scalaDocOptions = scalaDocOpts
  def javacOptions = javacOpts
  def repositoriesTask = Task.Anon { super.repositoriesTask() ++ repos }
  def scalaJSVersion = scalaJSVer
  trait TestSuite extends ScalaJSTests with scalalib.TestModule.ScalaTest {
    def ivyDeps = Agg(ivy"org.scalatest::scalatest::$scalaTestVer")
  }
}

object slang extends ScalaModule {
  def millSourcePath = super.millSourcePath / os.up
  def sources = Task.Sources { Seq(PathRef(millSourcePath / ".BIN")) }
  def resources = Task.Sources { Seq() }
  def unmanagedClasspath = Task {
    val sireumHome = Option(System.getenv("SIREUM_HOME")) match {
      case Some(p) => os.Path(p)
      case _ => os.Path("/home/sashamane/Development/sireum/kekinian")
    }
    Agg(PathRef(sireumHome / "bin" / "sireum.jar"))
  }
}

object isolette_single_sensor_Instance extends ScalaModule {
  def millSourcePath = super.millSourcePath / os.up / "src"
  def moduleDeps = Seq()
  def sources = Task.Sources {
    Seq(PathRef(millSourcePath / "main" / "art"), PathRef(millSourcePath / "main" / "architecture"), PathRef(millSourcePath / "main" / "bridge"), PathRef(millSourcePath / "main" / "component"), PathRef(millSourcePath / "main" / "data"), PathRef(millSourcePath / "main" / "nix"), PathRef(millSourcePath / "main" / "seL4Nix"), PathRef(millSourcePath / "main" / "util"))
  }
  def resources = Task.Sources {
    Seq()
  }
  def ivyDeps = Task { Agg(
    ivy"org.scala-lang:scala-reflect:$scalaVer",
    ivy"org.sireum.kekinian::library:${`org.sireum.kekinian::library:`}",
    ivy"org.sireum.kekinian::hamr-vision:${`org.sireum.kekinian::hamr-vision:`}"
  )}
  object tests extends TestSuite {
    def millSourcePath = `m-isolette_single_sensor_Instance`.millSourcePath
    def moduleDeps = Seq(`m-isolette_single_sensor_Instance`)
    def sources = Task.Sources {
      Seq(PathRef(millSourcePath / "test" / "bridge"), PathRef(millSourcePath / "test" / "system"), PathRef(millSourcePath / "test" / "util"))
    }
    def resources = Task.Sources {
      Seq()
    }
  }
}
}