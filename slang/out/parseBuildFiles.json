{
    "value": {
        "seenScripts": [
            [
                "/home/sashamane/Development/test-out/slang/build.mill",
                "\n\nimport mill._, scalalib._\n\nval scalaVer = \"2.13.16\"\nval scalaJSVer = \"1.18.2\"\nval scalaTestVer = \"3.2.19\"\nval scalacPluginVer = \"4.20250312.bf55c08\"\n\nval scalacOpts = Seq(\"-release\", \"17\", \"-deprecation\", \"-Yrangepos\", \"-Ydelambdafy:method\", \"-feature\", \"-unchecked\", \"-language:postfixOps\")\n\nval scalaDocOpts = Seq(\"-siteroot\", \"mydocs\", \"-no-link-warnings\")\n\nval javacOpts = Seq(\"-source\", \"17\", \"-target\", \"17\", \"-encoding\", \"utf8\", \"-XDignore.symbol.file\", \"-Xlint:-options\", \"-Xlint:deprecation\", \"-proc:none\")\n\nval repos = Seq(\n  coursier.maven.MavenRepository((os.home / \".m2\" / \"repository\").toIO.toURI.toASCIIString),\n  coursier.maven.MavenRepository(\"https://oss.sonatype.org/content/repositories/releases\"),\n  coursier.maven.MavenRepository(\"https://jitpack.io\")\n)\n\nval `org.sireum.kekinian::library:` = \"ff179091ab\"\nval `org.sireum.kekinian::hamr-vision:` = \"ff179091ab\"\n\ndef `m-isolette_single_sensor_Instance` = isolette_single_sensor_Instance\n\n\ntrait JavaModule extends javalib.JavaModule {\n  def javacOptions = javacOpts\n  def repositoriesTask = Task.Anon { super.repositoriesTask() ++ repos }\n  trait TestSuite extends JavaTests with scalalib.TestModule.ScalaTest {\n    def ivyDeps = Agg(ivy\"org.scalatest::scalatest::$scalaTestVer\")\n  }\n}\n\ntrait ScalaModule extends scalalib.ScalaModule {\n  def scalaVersion = scalaVer\n  def scalacOptions = scalacOpts\n  def scalacPluginIvyDeps = Agg(ivy\"org.sireum::scalac-plugin:$scalacPluginVer\")\n  def scalaDocOptions = scalaDocOpts\n  def javacOptions = javacOpts\n  def repositoriesTask = Task.Anon { super.repositoriesTask() ++ repos }\n  trait TestSuite extends ScalaTests with scalalib.TestModule.ScalaTest {\n    def ivyDeps = Agg(ivy\"org.scalatest::scalatest::$scalaTestVer\")\n  }\n}\n\ntrait ScalaJSModule extends scalajslib.ScalaJSModule {\n  def scalaVersion = scalaVer\n  def scalacOptions = scalacOpts\n  def scalacPluginIvyDeps = Agg(ivy\"org.sireum::scalac-plugin:$scalacPluginVer\")\n  def scalaDocOptions = scalaDocOpts\n  def javacOptions = javacOpts\n  def repositoriesTask = Task.Anon { super.repositoriesTask() ++ repos }\n  def scalaJSVersion = scalaJSVer\n  trait TestSuite extends ScalaJSTests with scalalib.TestModule.ScalaTest {\n    def ivyDeps = Agg(ivy\"org.scalatest::scalatest::$scalaTestVer\")\n  }\n}\n\nobject slang extends ScalaModule {\n  def millSourcePath = super.millSourcePath / os.up\n  def sources = Task.Sources { Seq(PathRef(millSourcePath / \".BIN\")) }\n  def resources = Task.Sources { Seq() }\n  def unmanagedClasspath = Task {\n    val sireumHome = Option(System.getenv(\"SIREUM_HOME\")) match {\n      case Some(p) => os.Path(p)\n      case _ => os.Path(\"/home/sashamane/Development/sireum/kekinian\")\n    }\n    Agg(PathRef(sireumHome / \"bin\" / \"sireum.jar\"))\n  }\n}\n\nobject isolette_single_sensor_Instance extends ScalaModule {\n  def millSourcePath = super.millSourcePath / os.up / \"src\"\n  def moduleDeps = Seq()\n  def sources = Task.Sources {\n    Seq(PathRef(millSourcePath / \"main\" / \"art\"), PathRef(millSourcePath / \"main\" / \"architecture\"), PathRef(millSourcePath / \"main\" / \"bridge\"), PathRef(millSourcePath / \"main\" / \"component\"), PathRef(millSourcePath / \"main\" / \"data\"), PathRef(millSourcePath / \"main\" / \"nix\"), PathRef(millSourcePath / \"main\" / \"seL4Nix\"), PathRef(millSourcePath / \"main\" / \"util\"))\n  }\n  def resources = Task.Sources {\n    Seq()\n  }\n  def ivyDeps = Task { Agg(\n    ivy\"org.scala-lang:scala-reflect:$scalaVer\",\n    ivy\"org.sireum.kekinian::library:${`org.sireum.kekinian::library:`}\",\n    ivy\"org.sireum.kekinian::hamr-vision:${`org.sireum.kekinian::hamr-vision:`}\"\n  )}\n  object tests extends TestSuite {\n    def millSourcePath = `m-isolette_single_sensor_Instance`.millSourcePath\n    def moduleDeps = Seq(`m-isolette_single_sensor_Instance`)\n    def sources = Task.Sources {\n      Seq(PathRef(millSourcePath / \"test\" / \"bridge\"), PathRef(millSourcePath / \"test\" / \"system\"), PathRef(millSourcePath / \"test\" / \"util\"))\n    }\n    def resources = Task.Sources {\n      Seq()\n    }\n  }\n}"
            ]
        ],
        "repos": [],
        "ivyDeps": [],
        "errors": [],
        "metaBuild": false,
        "buildFile": "build.mill"
    },
    "valueHash": -1120568233,
    "inputsHash": 1165915352
}